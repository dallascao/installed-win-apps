"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path_1 = require("path");
function readDirectory(directory) {
    return new Promise(function (resolve, reject) {
        fs_1.readdir(directory, function (err, files) {
            if (err)
                return reject(err);
            resolve(files.map(function (file) { return path_1.resolve(directory, file); }));
        });
    });
}
function statistics(path) {
    return new Promise(function (resolve, reject) {
        fs_1.stat(path, function (err, statistics) {
            if (err)
                return reject(err);
            resolve(statistics);
        });
    });
}
function matchesExtension(file, extension) {
    if (typeof extension === 'string') {
        if (file.endsWith(extension))
            return file;
    }
    else if (extension instanceof RegExp) {
        if (file.match(extension))
            return file;
    }
    else {
        throw new Error('Extension must be a string or a regular expression!');
    }
}
function listFiles(directory, extension) {
    if (typeof extension === 'string' && !extension.startsWith('.'))
        extension = "." + extension;
    return readDirectory(directory)
        .then(function (files) { return Promise.all(files.map(function (file) { return statistics(file)
        .then(function (stats) {
        if (stats.isDirectory())
            return listFiles(file, extension);
        if (!extension || (extension && matchesExtension(file, extension)))
            return file;
    }); })); })
        .then(function (files) { return Array.prototype.concat.apply([], files).filter(function (file) { return !!file; }); });
}
exports.listFiles = listFiles;
function listFilesSync(directory, extension, files) {
    if (files === void 0) { files = []; }
    if (typeof extension === 'string' && !extension.startsWith('.'))
        extension = "." + extension;
    for (var _i = 0, _a = fs_1.readdirSync(directory); _i < _a.length; _i++) {
        var file = _a[_i];
        file = path_1.resolve(directory, file);
        if (fs_1.statSync(file).isDirectory()) {
            files = listFilesSync(file, extension, files);
        }
        else if (!extension || (extension && matchesExtension(file, extension))) {
            files.push(file);
        }
    }
    return files;
}
exports.listFilesSync = listFilesSync;
